#!/bin/bash
# source goenv
GOLIB=$(pwd)
GOVENDOR=$(pwd)/vendor


if [[ -z $GOROOT ]] ; then
    if [[ -e golang ]] ; then
        export GOROOT=$(pwd)/golang
    else
        echo "GOROOT is empty, please export GOROOT to your go source root."
        echo "Or run "
        echo "    hg clone -u release https://code.google.com/p/go"
        echo "To get the golang source"
        exit 1
    fi
fi

echo "Adding $GOLIB to GOPATH..."
export GOPATH=$GOLIB


echo "Checking go project directory structure..."
for subd in src bin pkg doc bin ; do
    [[ ! -e $subd ]] && (mkdir -p $subd ; echo "\tcreate $subd")
done


if [[ -n $GOVENDOR ]] ; then
    export GOPATH=$GOVENDOR:$GOPATH
    for subd in src bin pkg doc bin ; do
        [[ ! -e $GOVENDOR/$subd ]] && ( mkdir -p $GOVENDOR/$subd ; echo "\tcreate $GOVENDOR/$subd")
    done
fi

# export GOPATH=$GOLIB
export PATH=$GOLIB/bin:$PATH
if [[ -e golang ]] ; then 
    export PATH=$(pwd)/golang/go/bin:$PATH
    if [[ -z $GOROOT ]] ; then
        export GOROOT=$(pwd)/golang/go
    fi
fi
echo "Done"

function clean() {
    echo "Cleaning..."
    rm -rf pkg
}

function get() {
    repo=$1
    go get -x -u $repo
}

function git_install() {
  installdir=$(echo $GOPATH | cut -d: -f1)
  repo=$1
  target=$installdir/src/$2
  branch=$3
  currentdir=$(pwd)

  if [[ -z $branch ]] ; then
    branch=master
  fi

  mkdir -p $(dirname $target)

  echo "===> Sync $repo => $target..."
  if [[ ! -e $target ]] ; then
    echo "Cloning..."
    git clone --branch $branch $repo $target
  else
    echo "Fetching..."
    GITCMD="git --work-tree $target --git-dir $target/.git"
    if [[ -z `$GITCMD diff` ]] ; then
      $GITCMD pull -q --rebase origin HEAD
    else
      $GITCMD fetch -q
    fi

    if [[ -n `$GITCMD log @{u}..` ]] ; then
        echo "Pushing commits..."
        $GITCMD push origin HEAD
    fi
    cd $target && go install && cd $currentdir
  fi
}
